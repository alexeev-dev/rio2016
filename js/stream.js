// Generated by CoffeeScript 1.9.3
(function() {
  var Stream, animation_is_running;

  Stream = (function() {
    var animation, animation_step, append_layer, calc_base, current_base, layers, load_layer, load_next_layer, move_layers, next_layer, offset, saved_speed;

    function Stream() {}

    layers = [];

    offset = 0.0;

    animation = null;

    next_layer = 0;

    current_base = 100.0;

    animation_step = -0.5;

    saved_speed = 0;

    Stream.init = function() {
      var i, j, results;
      results = [];
      for (i = j = 1; j <= 7; i = ++j) {
        results.push(load_next_layer());
      }
      return results;
    };

    Stream.start_animation = function() {
      return animation = setInterval(function() {
        return move_layers(animation_step);
      }, 10);
    };

    Stream.pause_animation = function() {
      saved_speed = animation_step;
      return animation_step = 0;
    };

    Stream.play_animation = function() {
      return animation_step = saved_speed;
    };

    Stream.stop_animation = function() {
      return clearInterval(animation);
    };

    Stream.increase_speed = function() {
      animation_step -= 0.1;
      if (animation_step < -1.2) {
        return animation_step = -1.2;
      }
    };

    Stream.decrease_speed = function() {
      animation_step += 0.1;
      if (animation_step > 0.0) {
        return animation_step = 0;
      }
    };

    move_layers = function(step) {
      var distance, j, layer, leave, len;
      offset += step;
      leave = null;
      for (j = 0, len = layers.length; j < len; j++) {
        layer = layers[j];
        distance = layer.base + offset;
        layer.instance.set_distance(distance);
        if (distance <= 20.0) {
          leave = layer;
        }
      }
      if (leave !== null) {
        leave.instance.remove();
        layers = layers.slice(1);
        return load_next_layer();
      }
    };

    load_next_layer = function() {
      return load_layer(next_layer++, function(layer) {
        return append_layer(layer);
      });
    };

    load_layer = function(number, finish) {
      return $.get("phrases.json", function(data) {
        return finish(data);
      }, "json");
    };

    append_layer = function(layer) {
      var base, instance, j, len, phrase;
      if (layer.length > 20) {
        layer = layer.slice(0, 20);
      }
      if (layer.length < 20) {
        next_layer = 0;
      }
      instance = new PhrasesLayer();
      base = calc_base();
      for (j = 0, len = layer.length; j < len; j++) {
        phrase = layer[j];
        instance.append_phrase(new Phrase(phrase.title, phrase.text));
      }
      layers.push({
        base: base,
        instance: instance
      });
      return move_layers(0);
    };

    calc_base = function() {
      return current_base += 25.0;
    };

    return Stream;

  })();

  Stream.init();

  animation_is_running = false;

  $(window).scroll(function() {
    var offset;
    offset = $(window).scrollTop();
    if (offset > 200 && animation_is_running === false) {
      Stream.start_animation();
      return animation_is_running = true;
    }
  });

  $(window).keydown(function(event) {
    if (event.which === 38) {
      event.preventDefault();
      Stream.increase_speed();
    }
    if (event.which === 40) {
      event.preventDefault();
      return Stream.decrease_speed();
    }
  });

  $(window).on("phrase-clicked", function(event, phrase) {
    $("#modal-title").html(phrase.title);
    $("#modal-text").html(phrase.text);
    $("body").data("popup", "phrase");
    $("#modal-trigger").click();
    return Stream.pause_animation();
  });

  $(window).on("popup-closed", function(event) {
    if ($("body").data("popup") === "phrase") {
      $("body").data("popup", "");
      return Stream.play_animation();
    }
  });

}).call(this);
